{"version":3,"file":"static/js/525.62a45cfb.chunk.js","mappings":"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","sources":["components/ContactForm/CpntactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/contacts/contacts.jsx"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { addContactThunk, selectUserContacts } from \"redux/contactsReducer\";\n\nfunction ContactForm() {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectUserContacts);\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      const form = e.currentTarget;\n\n      const name = form.elements.contactName.value;\n      const number = form.elements.contactNumber.value;\n\n      if (contacts.some(contact => contact.name === name))\n        return alert(`Contact with name ${name} already exists!`);\n\n      dispatch(addContactThunk({ name, number }));\n    };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <p>Name:</p>\n        <input\n          name=\"contactName\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          type=\"text\"\n          required\n        />\n      </label>\n      <br />\n      <label>\n        <p>Number:</p>\n        <input\n          name=\"contactNumber\"\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          type=\"text\"\n          required\n        />\n      </label>\n      <br />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { useDispatch, useSelector } from \"react-redux\";\nimport { deleteContactThunk, selectUserContacts } from \"redux/contactsReducer\";\nimport { selectFilters } from \"redux/filterSlice\";\n\n\nconst ContactList = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectUserContacts);\n    const filter = useSelector(selectFilters);\n\n \n  const getFilteredContacts = () => {\n   if (!contacts) return []\n    return contacts.filter(\n      contact =>\n        contact.name &&\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const filteredContacts = getFilteredContacts();\n\nconst handleDeleteContact = contactId => {\n  dispatch(deleteContactThunk(contactId));\n};\n\n  return (\n    <ul>\n      {filteredContacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button\n            type=\"button\"\n            onClick={() => handleDeleteContact(contact.id)}\n            style={{ marginLeft: '10px' }}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilters, updateFilter } from 'redux/filterSlice';\n\n\n\nconst Filter = () => {\n  const filter = useSelector(selectFilters);\n  const dispatch = useDispatch();\n  const handleFilterChange = event => {\n    dispatch(updateFilter(event.target.value));\n  };\n  return (\n    <label>\n      Filter contacts by name:\n      <input type=\"text\" value={filter} onChange={handleFilterChange} />\n    </label>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/CpntactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { selectAuthentificated } from 'redux/authReducer';\nimport {\n  requestContactsThunk,\n  selectContactsError,\n  selectContactsIsLoading,\n} from 'redux/contactsReducer';\n\nconst ContactsPage = () => {\n  const authentificated = useSelector(selectAuthentificated);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!authentificated) return ;\n\n    dispatch(requestContactsThunk());\n  }, [authentificated, dispatch]);\n\n   if (!authentificated) return <Navigate to=\"/contacts\" />;\n  return (\n    <section>\n      <ContactForm/>\n      <Filter/>\n\n      {isLoading && <h2>Loading...</h2>}\n      {error && <p>Oops, some error occured... {error}</p>}\n      <ContactList/>\n    </section>\n  );\n};\nexport default ContactsPage;\n"],"names":["dispatch","useDispatch","contacts","useSelector","selectUserContacts","_jsxs","onSubmit","e","preventDefault","form","currentTarget","name","elements","contactName","value","number","contactNumber","some","contact","alert","concat","addContactThunk","children","_jsx","pattern","type","required","filter","selectFilters","filteredContacts","toLowerCase","includes","map","onClick","contactId","id","deleteContactThunk","style","marginLeft","onChange","event","updateFilter","target","authentificated","selectAuthentificated","isLoading","selectContactsIsLoading","error","selectContactsError","useEffect","requestContactsThunk","ContactForm","Filter","ContactList","Navigate","to"],"sourceRoot":""}
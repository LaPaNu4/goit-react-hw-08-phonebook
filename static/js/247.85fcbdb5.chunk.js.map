{"version":3,"file":"static/js/247.85fcbdb5.chunk.js","mappings":"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","sources":["redux/contact/selectorCont.js","components/ContactForm/ContactForm.jsx","redux/filter/selectFilt.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/contacts/contacts.jsx"],"sourcesContent":["export const selectUserContacts = state => state.contacts.contacts;\nexport const selectContactsIsLoading = state => state.contacts.isLoading;\nexport const selectContactsError = state => state.contacts.error;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { addContactThunk } from 'redux/contact/operationsCont';\nimport { selectUserContacts } from 'redux/contact/selectorCont';\n\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectUserContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n\n    const name = form.elements.contactName.value;\n    const number = form.elements.contactNumber.value;\n\n    if (contacts.some(contact => contact.name === name))\n      return alert(`Contact with name ${name} already exists!`);\n\n    dispatch(addContactThunk({ name, number }));\n    form.reset()\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label>\n        <p>Name:</p>\n        <input\n          name=\"contactName\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          type=\"text\"\n          required\n        />\n      </label>\n      <br />\n      <label>\n        <p>Number:</p>\n        <input\n          name=\"contactNumber\"\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          type=\"text\"\n          required\n        />\n      </label>\n      <br />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","export const selectFilters = state => state.filter.filter;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contact/operationsCont';\nimport { selectUserContacts } from 'redux/contact/selectorCont';\nimport { selectFilters } from 'redux/filter/selectFilt';\n\n\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectUserContacts);\n  const filter = useSelector(selectFilters);\n\n  const getFilteredContacts = () => {\n    if (!contacts) return [];\n    return contacts.filter(\n      contact =>\n        contact.name &&\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const filteredContacts = getFilteredContacts();\n\n  const handleDeleteContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n  };\n\n  return (\n    <ul>\n      {filteredContacts.map(contact => (\n        <li key={contact.id}>\n          {contact.name}: {contact.number}\n          <button\n            type=\"button\"\n            onClick={() => handleDeleteContact(contact.id)}\n            style={{ marginLeft: '10px' }}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {  updateFilter } from 'redux/filter/filterSlice';\nimport { selectFilters } from 'redux/filter/selectFilt';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilters);\n  const dispatch = useDispatch();\n  const handleFilterChange = event => {\n    dispatch(updateFilter(event.target.value));\n  };\n  return (\n    <label>\n      Filter contacts by name:\n      <input type=\"text\" value={filter} onChange={handleFilterChange} />\n    </label>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm/ContactForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport Filter from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { selectAuthentificated } from 'redux/auth/selectors';\nimport { requestContactsThunk } from 'redux/contact/operationsCont';\nimport { selectContactsError, selectContactsIsLoading } from 'redux/contact/selectorCont';\n\n\n\nconst ContactsPage = () => {\n  const authentificated = useSelector(selectAuthentificated);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const error = useSelector(selectContactsError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!authentificated) return;\n\n    dispatch(requestContactsThunk());\n  }, [authentificated, dispatch]);\n\n  if (!authentificated) return <Navigate to=\"/login\" />;\n  return (\n    <section>\n      <div>\n        <ContactForm />\n        <Filter />\n  \n        {isLoading && <h2>Loading...</h2>}\n        {error && <p>Oops, some error occured... {error}</p>}\n        <ContactList />\n      </div>\n    </section>\n  );\n};\nexport default ContactsPage;\n"],"names":["selectUserContacts","state","contacts","selectContactsIsLoading","isLoading","selectContactsError","error","dispatch","useDispatch","useSelector","_jsxs","onSubmit","e","preventDefault","form","currentTarget","name","elements","contactName","value","number","contactNumber","some","contact","alert","concat","addContactThunk","reset","children","_jsx","pattern","type","required","selectFilters","filter","filteredContacts","toLowerCase","includes","map","onClick","contactId","id","deleteContactThunk","style","marginLeft","onChange","event","updateFilter","target","authentificated","selectAuthentificated","useEffect","requestContactsThunk","ContactForm","Filter","ContactList","Navigate","to"],"sourceRoot":""}